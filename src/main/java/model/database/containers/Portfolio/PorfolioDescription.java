package model.database.containers.Portfolio;

import model.database.containers.Description;
import model.database.containers.User.UserDescription;

import java.io.Serializable;

/**
 * Describes a {@link Portfolio}, does contain all parameters in table, as it accompanies portfolio class
 * which is a Collection of TransactionMaps.
 * <p>
 * This description is mutable, as this can be edited by the user and then persisted
 */
public class PorfolioDescription implements Description {
    public static final int NUMBER_OF_PARAMETERS = 10;
    private static final int FIELD_TITLE_LENGTH = 10;
    private static final int FIELD_COMMENTARY_LENGTH = 200;
    private static final int FIELD_INDEX_NAME_LENGTH = 10;
    final UserDescription userDescription;
    final String uuid;
    private String title;
    private String commentary;
    private boolean isAutoGenerated;
    private float budget;
    private float targetEarnings;
    private float targetRisk;
    private boolean isFollowingIndex;
    private String indexName;

    public PorfolioDescription(String uuid, String FK_UUID_User, String title, String commentary,
                               boolean isAutoGenerated, float budget, float targetEarnings, float targetRisk,
                               boolean isFollowingIndex, String indexName) {
        this.userDescription = getUserDescription(FK_UUID_User);
        this.uuid = uuid;
        this.title = title;
        this.commentary = commentary;
        this.isAutoGenerated = isAutoGenerated;
        this.budget = budget;
        this.targetEarnings = targetEarnings;
        this.targetRisk = targetRisk;
        this.isFollowingIndex = isFollowingIndex;
        this.indexName = indexName;
    }

    public PorfolioDescription(String uuid, String FK_UUID_User, String title) {
        this.uuid = uuid;
        this.userDescription = getUserDescription(FK_UUID_User);
        this.title = title;
    }

    public PorfolioDescription(String uuid, String FK_UUID_User) {
        this.uuid = uuid;
        this.userDescription = getUserDescription(FK_UUID_User);
        this.title = "Untitled Portfolio";
    }
    private UserDescription getUserDescription(String FK_UUID_User) {
        //todo
        return null;
    }

    @Override
    public String describe() {
        return "User: " +  userDescription.describe() + "\n" +
        "UUID: " + uuid.length() + "\n" +
        "title: " + title + "\n" +
        "commentary: " + commentary + "\n" +
        "isAutoGenerated: " + isAutoGenerated + "\n" +
        "budget: " + budget + "\n" +
        "targetEarnings: " + targetEarnings + "\n" +
        "targetRisk: " + targetRisk + "\n" +
        "isFollowingIndex: " + isFollowingIndex + "\n" +
        "indexName: " + indexName + "\n";
    }

    @Override
    public String shortDescribe() {
        return "User: " + userDescription.describe() + "\n" +
                "Title: " + title + "\n" +
                "Commentary: " + commentary + "\n";
    }

    @Override
    public String[] toArrayDescription() {
        String[] array = new String[10];

        array[0] = "User: " + userDescription.describe();
        array[1] = "UUID: " + uuid.length();
        array[2] = "Title: " + title;
        array[3] = "Commentary: " + commentary;
        array[4] = "isAutoGenerated: " + isAutoGenerated;
        array[5] = "Budget: " + budget;
        array[6] = "Target Earnings: " + targetEarnings;
        array[7] = "Target Risk: " + targetRisk;
        array[8] = "isFollowingIndex: " + isFollowingIndex;
        array[9] = "Index Name: " + indexName;

        return array;
    }
    public UserDescription getUserDescription() {
        return userDescription;
    }
    public String describeUser(){
        return userDescription.describe();
    }

    public String getUUID() {
        return uuid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) throws IllegalArgumentException{
        if (title.length() <= FIELD_TITLE_LENGTH){
            this.title = title;
        }
        throw new IllegalArgumentException("Title too long, max chr: " + FIELD_TITLE_LENGTH);
    }

    public String getCommentary() {
        return commentary;
    }

    public void setCommentary(String commentary) throws IllegalArgumentException{
        if (commentary.length() <= FIELD_COMMENTARY_LENGTH){
            this.commentary = commentary;
        }
        throw new IllegalArgumentException("Commentary too long, max chr: " + FIELD_COMMENTARY_LENGTH);
    }

    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    public void setAutoGenerated(boolean autoGenerated) {
        isAutoGenerated = autoGenerated;
    }

    public float getBudget() {
        return budget;
    }

    public void setBudget(float budget) {
        this.budget = budget;
    }

    public float getTargetEarnings() {
        return targetEarnings;
    }

    public void setTargetEarnings(float targetEarnings) {
        this.targetEarnings = targetEarnings;
    }

    public float getTargetRisk() {
        return targetRisk;
    }

    public void setTargetRisk(float targetRisk) {
        this.targetRisk = targetRisk;
    }

    public boolean isFollowingIndex() {
        return isFollowingIndex;
    }

    public void setFollowingIndex(boolean followingIndex) {
        isFollowingIndex = followingIndex;
    }

    public String getIndexName() {
        return indexName;
    }

    public void setIndexName(String indexName) throws IllegalArgumentException{

        if (indexName.length() <= FIELD_INDEX_NAME_LENGTH){
            this.indexName = indexName;
        }
        throw new IllegalArgumentException("Index name too long, max chr: " + FIELD_INDEX_NAME_LENGTH);
    }
}
